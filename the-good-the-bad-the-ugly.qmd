---
title: "IRT procedures for shortening tests"
author: "Ottavia M. Epifania & Friends"
format: 
  revealjs: 
    theme: mytheme.scss
    logo: "www/psicostat.jpg"
    footer: "Psicostat meeting"
background-opacity: "0.45"
title-slide-attributes: 
   data-background-image: "https://psicostat.github.io/shine-bright/gbu.jpg"
   data-background-size: 400px, cover
   data-background-position: 50% 10%, center
server: shiny
---


```{css include = FALSE}
.reveal .slide-logo {
  height: 100px !important;
  width: 100px !important;
  max-width: unset !important;
  max-height: unset !important;
}
```



```{r, setup, include=FALSE}
library(knitr)
library(shiny)
library(ggplot2)
library(tidyverse)
IRT <- function(theta, a = 1, b = 0, c = 0,e = 1) {
  y <- c + (e - c) * exp(a * (theta - b)) / (1 + exp(a * (theta - b)))
  y[is.na(y)] = 1
  return(y)
}

i_info <- function(b, a=1,c=0, theta = seq(-5,5,length.out=1000)){
 
P <- NULL 
Q <- NULL
Ii <- NULL
for(i in 1:1000){
  P[i] <- 1/(1+ exp (-a*(theta[i] - b)))
  Q[i]= 1-P[i]
  Ii[i] =(a*Q[i]*(P[i]-c)^2)/(P[i]*((1-c)^2)) # (3PL)
   }
return(Ii)
}
# Function to get all item information
item_info <- function(b,a=1, c= 0){
item <- NULL
  for(i in 1:length(b)){
  item[[i]] <- i_info(b[i],a[i])
  }
return(item)
}

set.seed(999)
```



## The 2-Parameter Logistic Model

Item Response Function: 

$$P(x_{pi} = 1|\theta_p, b_i, a_i) = \frac{\exp[a_i(\theta_p - b_i)])}{1 + \exp[a_i(\theta_p - b_i)]}$$
<br>

. . .

Item Information Function: 


$$IIF_i = a_i^2P(\theta, b_i, a_i)[1-P(\theta, b_i, a_i)]$$

<br>

. . .

Test Information Function: 

$$TIF = \sum_{i = 1}^{||B||} IIF_i$$




## Intuitively 

```{r}
#| panel: sidebar
tags$style(HTML(".js-irs-0 .irs-single, .js-irs-0 .irs-bar-edge, .js-irs-0 .irs-bar {background: royalblue}"))
tags$style(HTML(".js-irs-1 .irs-single, .js-irs-1 .irs-bar-edge, .js-irs-1 .irs-bar {background: magenta}"))
tags$style(HTML(".js-irs-2 .irs-single, .js-irs-2 .irs-bar-edge, .js-irs-2 .irs-bar {background: seagreen}"))
tags$style(HTML(".js-irs-3 .irs-single, .js-irs-3 .irs-bar-edge, .js-irs-3 .irs-bar {background: royalblue}"))
tags$style(HTML(".js-irs-4 .irs-single, .js-irs-3 .irs-bar-edge, .js-irs-4 .irs-bar {background: magenta}"))
tags$style(HTML(".js-irs-5 .irs-single, .js-irs-5 .irs-bar-edge, .js-irs-5 .irs-bar {background: seagreen}"))


 sliderInput("b1", "b1",
                  min = -3, max = 3,
                  value = 0, step = 0.1)
sliderInput("b2", "b2",
                  min = -3, max = 3,
                  value = -1, step = 0.1)
sliderInput("b3", "b3",
                  min = -3, max = 3,
                  value = 1, step = 0.1)

sliderInput("a1", "a1",
                  min = 0.20, max = 3,
                  value = 1, step = 0.1)
sliderInput("a2", "a2",
                  min = 0, max = 3,
                  value = 1, step = 0.1)
sliderInput("a3", "a3",
                  min = 0, max = 3,
                  value = 1, step = 0.1)
checkboxInput("showTif", "Show Test Information Function", value = FALSE)

```

```{r}
#| panel: fill


plotOutput("plot", height = "300px")

plotOutput("tif", height = "300px")
```



```{r}
#| context: server
 output$plot <- renderPlot({
   theta <- theta <- seq(-7, 7, .001)
  par(mar = c(5,7,4,2) + 0.1)
  b = c(input$b1, input$b2, input$b3)
  a = c(input$a1, input$a2, input$a3)

 
 plot(theta, IRT(theta, b = input$b1, a = input$a1), 
                 type = "l", lwd = 2, lty = 2,
     col = "royalblue", main = "Item Characteristics Curves - ICCs", 
     ylab = expression(paste("P(", x[p][i],  "= 1|", theta[p], ", ", b[i], ", ", a[i], ")")), 
     xlab = expression(theta), 
     cex.lab = 2.4, 
     cex.main = 3, 
     cex.text=2, cex.axis=1.5)
 
segments(min(theta)-3, 0.5, 
         input$b1, 0.5, 
         col = "gray56", lty = 3, lwd = 1.3)
segments(input$b1, -0.5, 
         input$b1, 0.5, 
         col = "royalblue", lty = 3, lwd = 1.3)
 
lines(theta, IRT(theta, b=input$b2,
                 a=input$a2),
       type = "l", lwd = 2, lty = 2,
     col = "magenta")
 lines(theta, IRT(theta, b=input$b3,
                 a=input$a3),
       type = "l", lwd = 2, lty = 2,
     col = "seagreen")
 segments(min(theta)-3, 0.5, 
         input$b2, 0.5, 
         col = "gray56", lty = 3, lwd = 1.3)
segments(input$b2, -0.5, 
         input$b2, 0.5, 
         col = "magenta", lty = 3, lwd = 1.3)
 segments(min(theta)-3, 0.5, 
         input$b3, 0.5, 
         col = "gray56", lty = 3, lwd = 1.3)
segments(input$b3, -0.5, 
         input$b3, 0.5, 
         col = "seagreen", lty = 3, lwd = 1.3)
  })

output$tif <- renderPlot({
 
   theta <- theta <- seq(-7, 7, .001)
  par(mar = c(5,7,4,2) + 0.1)
  b = c(input$b1, input$b2, input$b3)
  a = c(input$a1, input$a2, input$a3)
c <- item_info(b,a)
Theta <- matrix(seq(-4,4, length.out=1000))
check <- data.frame(Theta,
                    item_info = c[[1]],
                    item_info2 = c[[2]],
                    item_info3 = c[[3]])
d <- do.call('cbind',c)
sum_info1 <- rowSums(d)
d1 <- do.call('cbind',c)
sum_info2 <- rowSums(d1)
plot(check$Theta, check$item_info, cex.lab= 2, main = "Item Information Functions - IIFs",
      cex.lab = 2.4, 
     cex.main = 3, 
     cex.text=2, cex.axis=1.5,
        xlab = expression(theta), ylab = expression(paste("IIF"[i])),
 type = "l", lwd =2,
      col = "royalblue", ylim = c(0,1))
 lines(check$Theta, check$item_info2, lwd =2,
       col = "magenta", lty = 4)
 lines(check$Theta, check$item_info3, lwd =2,
       col = "seagreen", lty = 2)
 
 
checkTif <- data.frame(Theta, sum_info1, sum_info2)

if (input$showTif == TRUE) {
  plot(checkTif$Theta, checkTif$sum_info2,
       type = "l", lwd =2,
     col = "black", ylim = c(0, 2),
       xlab = expression(theta), 
     ylab = expression(paste("I(", theta, ")")), 
     cex.axis=1.5, main = "IIFs and Test Information Functions",  
     cex.lab = 2.4, 
     cex.main = 3, 
     cex.text=2)
  lines(check$Theta, check$item_info, lwd =2,
       col = "royalblue", lty = 4)
   lines(check$Theta, check$item_info2, lwd =2,
       col = "magenta", lty = 4)
 lines(check$Theta, check$item_info3, lwd =2,
       col = "seagreen", lty = 2)
}



 
})
```



## Some premises 

::: {.callout-note}
## Key concept

<font size = "4">
**TIF target** ($\mathbf{TIF}^*$) describing the desired characteristics of a test
</font>
:::

::: {.callout-tip}
## The aim of the algorithms

<font size = "4">
*Minimize the distance* between $\mathbf{TIF}^*$ and that of the short test forms (STFs) 
</font>
:::


::: {.callout-warning}
## Their differences

<font size = "4">
The method for selecting and including the items in $Q \subset B$ from the item bank
</font>
:::




::: {.callout-important}
## Mean TIF

<font size = "4">
TIF is considered as mean TIF $\rightarrow$ as the number of items increases, the TIF increases
</font>
:::


## Bruto (tu quoque?!)
### The bad



$\forall Q \in\mathcal{Q} = 2^B \setminus \{\emptyset, B\}$, 


1. $\mathbf{TIF}^{Q} =  \frac{\sum_{i \in Q} IIF_i}{||Q||}$
2. $\overline{\Delta}_{\mathbf{TIF}^{Q}} =  \mathit{mean}(|\mathbf{TIF}^* - \mathbf{TIF}^{Q}|)$

$Q_{bruto} = \arg \min_{Q \in \mathcal{Q}} \overline{\Delta}_{\mathbf{TIF}^{Q}}$



```{r}
#| fig-align: center
#| out-width: "50%"
knitr::include_graphics("www/eeato.jpg")
```



## Item Locating Algorithm -- ILA
### The ugly

:::: {.columns}


::: {.column width="40%"}

<font size="4">
$B$: Item bank 
			

$Q^k \subset B$: Set of item selected for inclusion in the STF up to iteration $k$ ($Q^0 = \emptyset$)
			
$\mathbf{TIF}^*$: TIF target 
			
		
$TIF^k = \frac{\sum_{i\in Q^k} IIF_i}{||Q^k||}$, where $||Q^k||$ denotes the cardinality of $Q^k$, $\mathbf{TIF}^0 = (0, 0, \ldots, 0)$ 

</font>

:::

::: {.column width="60%"}


```{r}
#| fig-align: center
#| out-width: "200%"
knitr::include_graphics("www/ila.png")
```



::: 

::::

## Frank[^1]
### The good




At $k =0$, $\mathbf{TIF}^0 = (0, 0, \ldots, 0)$, $Q^0 = \emptyset$, iterate


1. $A^k = B \setminus Q^k$

2. $\forall i \in A^k$, $\mathbf{PIF}_{i}^k = \frac{\mathbf{TIF}^k + \mathbf{IIF}_{i}}{||Q^k||+1}$

3. $D = \arg \min_{i \in A^k} |\mathbf{TIF}^* - \mathbf{PIF}_i^k|$

Termination criterion: $|\mathbf{TIF}^* - \mathbf{PIF}_D^{k}| \geq |\mathbf{TIF}^* - \mathbf{TIF}^{k-1}|$: 

  - If false, $k = k + 1,$ $Q^{k+1} = Q^k \cup \{D\}$, restart from 1

  - If true, stops, $Q_{Frank} = Q^k$


[^1]: <font size="3"><font size="6">**FRANK**</font>ly I didn't know how to name it</font>


## Simulation time

100 data frames

1. Generate an item bank $B$ of $6$ items: 
        
      - Difficulty parameters: $\mathcal{U}(-3, 3)$
        
      - Discrimination parameters:  $\mathcal{U}(.90, 2.0)$
		 
2. Random item selections of lengths $l$ from $B$ ($M_l = 3.34 \pm 1.13$) + modification parameters $\mathcal{U}(-0.20, 0.20)$ $\rightarrow$ $\mathbf{TIF}^*$ 
		
3. Considering $\mathbf{TIF}^*$ at Step 2 and item parameters at Step 1:

      - Bruto  $\rightarrow$ Systematically tests
      
      - ILA  $\rightarrow$ Forwardly searches considering a single $\theta$
      - Frank $\rightarrow$ Forwardly searches considering the whole latent trait 		




## Results 

::: {.panel-tabset}

## So... 

```{r}

load("gbu-comparison.RData")
mycomparison = item_comparison[, c("nbruto", "nfrank", "nila")]
mycomparison$iter = 1:100
ic_long = pivot_longer(mycomparison, cols = !iter)



ic = ic_long %>%  
  group_by(name) %>%  
  summarise(min = min(value), max = max(value), mean = mean(value), median = mean(value), 
            sd = sd(value))
ggplot(ic, 
       aes(x = name, y = mean, color = name)) + geom_point(shape = 5, size = 6) + ylim(0,6) + 
  geom_errorbar(aes(ymin = mean-sd, ymax = mean+sd), width = .2)+ 
  geom_point(aes(x = name, y = min), shape = 19, size = 6) + geom_point(aes(x = name, y = max), 
                                                                       shape = 15, size = 6) + 
  geom_point(aes(x = name, y = median), shape = 4, size = 6) + 
  scale_color_manual(values = c("royalblue","red",  "seagreen")) + 
  ylab("Number of items") + theme_light() + 
  theme(axis.text = element_text(size = 26),
        axis.title.y = element_text(size = 28),
        axis.title.x = element_blank(), 
        legend.position = "none")


```


## In summary 


```{r}
ggplot(sum_algo, 
       aes(x = l_stf, y = mean, color = algo, 
           shape = algo)) + geom_line(linewidth = 1.2) + geom_point(size = 4) + theme_light() +
  ylab(expression(paste(TIF^"* - ", TIF[STF]))) +  xlab("Length STF") +
  scale_color_manual(values = c("royalblue","red",  "seagreen")) +
  scale_x_continuous(n.breaks = 6)  + theme(axis.title = element_text(size = 28), 
        axis.text = element_text(size = 26), 
        legend.position = c(.7,.9), 
        legend.title = element_blank(), 
        legend.text = element_text(size = 24), 
        legend.key.size = unit(2, "cm")) +
  guides(color=guide_legend(ncol=3))

```




## Spill the tea

```{r}
ggplot(allalgo, 
       aes(x = factor(l_stf), y = value, color = algo)) + geom_boxplot() + theme_light() +
  ylab(expression(paste(TIF^"* - ", TIF[STF]))) +  xlab("Length STF") +
  scale_color_manual(values = c("royalblue","red",  "seagreen")) +
  theme(axis.title = element_text(size = 28), 
        axis.text = element_text(size = 26), 
        legend.position = c(.7,.9), 
        legend.title = element_blank(), 
        legend.text = element_text(size = 24), 
        legend.key.size = unit(2, "cm")) +
  guides(color=guide_legend(ncol=3))
```


:::


## When $||Q_{ILA}|| = ||Q_{Frank}|| = ||Q_{Bruto}||$
### But $Q_{Ila} \neq Q_{frank} \neq Q_{bruto}$

```{r}
library(patchwork)
all_equals = as.numeric(rownames(select_equal1[select_equal1$is_equal_all == FALSE, ])
)
wrap_plots(g[all_equals])
```

## In the end 

<br>

Mathematically, we are at loss

Psychologically? I don't know

Do they work? Hopefully

::: {.callout-tip}
## Acknowfndabfjknc

Pasquale Anselmi, Egidio Robusto, Livio Finos, Gianmarco Altoè


:::


</br>


. . .

::: {.callout-note}

## This happened too

Roses are red, violets are blue, 

my computer broke down on these simulations, 

and I broke down too
:::
